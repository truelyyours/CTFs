

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_256 = Integer(256); _sage_const_3 = Integer(3); _sage_const_3329 = Integer(3329); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8)
from secret import FLAG

degree = _sage_const_256 
vec_size = _sage_const_3 
p = _sage_const_3329 
smallness = _sage_const_2 

Q = PolynomialRing(GF(p), names=('y',)); (y,) = Q._first_ngens(1)
R = QuotientRing(Q, Q.ideal(y**degree + _sage_const_1 ), names=('x',)); (x,) = R._first_ngens(1)

def gen_small_vect():
    return vector([R([randint(_sage_const_0 ,smallness) for _ in range(degree)]) for _ in range(vec_size)])

def gen_coeffs():
    return Matrix([[R.random_element() for _ in range(vec_size)] for _ in range(vec_size)])

def encode_message(m):
    return R(sum([[int(b) for b in bin(c)[_sage_const_2 :].zfill(_sage_const_8 )] for c in m], []))

s = gen_small_vect()
coeffs = gen_coeffs()

assert len(FLAG)*_sage_const_8  <= degree
r, err1 = gen_small_vect(), gen_small_vect()
err2 = R([randint(_sage_const_0 ,smallness) for _ in range(degree)])
flag_b = encode_message(FLAG)
p_round = p//_sage_const_2  + _sage_const_1 
f = p_round*flag_b
ctxt = (coeffs.T*r + err1, (coeffs*s + gen_small_vect())*r + err2 + f)

noise = randint(-vec_size**degree, vec_size**degree)
noisy_s = noise*s

with open("data.txt", 'w') as f:
    f.write(f"noisy_s: {noisy_s}\n")
    f.write(f"ctxt: {ctxt}\n")

